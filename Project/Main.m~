% Main for the script that implements an attractor based neural firing
% model on a stimulus regime that's supposed to mimic the Mante task.

%% General Paramters

% The lines below this comment provide an optional entry point for my
% ParameterExplorer class to take over execution of the script, else, it
% simply runs the script with the following default parameters. For reasons
% why using this parameter explorer is smart, for one, it automatically
% stores data in a folder system structured like the parameter space
% explored. Second, it is able to run many instances of this script in
% parallel, as many as the processor can support. Third, it has an ability
% to stop/start in the middle of paramter exploration (checkpoints,
% automatically).
if ~exist('params','var') || ~isstruct(params) 
   params = struct( ...
           ... Model Resolution/Precision
           'dt',    2e-4, ... Model bin size
           'bin_t', 5e-2, ... How to bin post hoc for analysis
       ... ---TASK PARAMETERS---
           ... General Trial Controls
           'nTrials',       100, ...
           'trialDuration', 3, ...
           ... Context Stimulus
           'context_trialStart',    0.3, ...
           'context_trialEnd',      1.1, ...
           ... Color Motion Stimulus
           'color_trialStart',      0.35, ...
           'color_trialEnd',      1.1, ...
           ... Dot Color Stimulus
           'dot_trialStart',        0.35, ...
           'dot_trialEnd',      1.1, ...
       ... ---NEURAL NETWORK PARAMETERS---
           ... Number of neurons of each type
           'nInh',      5, ...
           'nExc',      40, ...
           ... Neural Properties
           'rMax0E',    100, ...
           'rMax0I',    200, ...
           'p0E',       0.3, ...
           'p0I',       0.1, ...
           ...Time Constants
           'tausE',     0.025, ...
           'tausI',     0.005, ...
           'tauDbar',   0.025, ...
           'tauDvar',   0,     ...
           'taum',      0.010, ...
           ... Connection Properties
           'Wrecurrent',    200, ...
           'sigmaWEE',      0, ...
           'sigmaWasym',    0, ...
           'WIEval',        -320, ...
           'sigmaIE',       0 ...
       );
end

% Temporary note - properties that have to be defined post-parameter stage
% not yet accounted for: (Ith_i, Ith_e, IsigmaTh), (Iwidth_i Iwidth_e),
% WEEasym WEIval pmean

% Setup neuron counts
neurIdentites=[false(1,params.nExc) true(1,params.nInh)];

%% Initialize Parameter-based Simulation Vectors

% ------------------------------------------------------------------------
% NEURAL VECTORS
N = NeuronProperties; % Encapsulated code for setting up overall neuron/synaptic vectors
    % First, we set the properties to build the the output properties
    N.rMax0E=params.rMax0E; N.rMax0I=params.rMax0I;
    N.p0E=params.p0E; N.p0I=params.p0I;
    N.tausE=params.tausE; N.tausI=params.tausI;
    N.tauDbar=params.tauDbar; N.tauDvar=params.tauDvar;
    % Then, we invoke the generation method to create them
    N.generateOutputParams;

% ------------------------------------------------------------------------
% CONECTION VECTORS
C = ConnectionProperties; % Encapsulated code for computing overall W vector
    % First, we set the properties to build the W matrix
    C.Rec.EE = params.Wrecurrent;
    C.Sig.Rec.EE = params.sigmaWEE; C.Sig.Asym.EE = params.sigmaWEE;
    C.Base.IE = params.WIEval; C.Sigma.IE = params.sigmaIE;
    % then, we invoke the generation method to create W
    W = C.generateConnections();

% ------------------------------------------------------------------------
% STIMULI VECTORS
% 
% (1) Setup 

%% Execute Simulation

%% Post-simulation Analysis